// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String?  // Make password optional for OAuth users
  firstName String?
  lastName  String?
  avatar    String?
  isOnline  Boolean  @default(false)
  lastSeen  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // OAuth fields
  provider     String?  // 'email', 'google', 'discord'
  providerId   String?  // OAuth provider user ID
  emailVerified DateTime?

  // Subscription
  subscriptionTier   SubscriptionTier @default(FREE)
  subscriptionExpiry DateTime?
  stripeCustomerId   String?

  // Gaming Profile
  totalPlayTime      Int      @default(0) // minutes
  gamesPlayed        Int      @default(0)
  sessionsHosted     Int      @default(0)
  sessionsJoined     Int      @default(0)

  // Relationships
  accounts          Account[]
  sessions          Session[]
  ownedGames        UserGame[]
  hostedSessions    GameSession[] @relation("SessionHost")
  joinedSessions    SessionPlayer[]
  sentFriendships   Friendship[]  @relation("FriendshipSender")
  receivedFriendships Friendship[] @relation("FriendshipReceiver")
  chatMessages      ChatMessage[]
  notifications     Notification[]

  @@map("users")
}

model Game {
  id                 String   @id @default(cuid())
  name               String
  description        String
  version            String?
  iconUrl            String?
  bannerUrl          String?
  supportedPlatforms String   @default("PC") // Comma-separated platforms
  maxPlayers         Int      @default(8)
  minPlayers         Int      @default(2)
  isActive           Boolean  @default(true)
  category           GameCategory
  tags               String?  // Comma-separated tags
  releaseYear        Int?
  developer          String?
  publisher          String?
  addedAt            DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Game Configuration
  executablePath     String?
  launchParameters   String?
  requiresVPN        Boolean  @default(true)
  networkPorts       String?  // Comma-separated port numbers

  // Relationships
  userGames         UserGame[]
  sessions          GameSession[]

  @@map("games")
}

model UserGame {
  id             String   @id @default(cuid())
  userId         String
  gameId         String
  executablePath String
  customName     String?
  launchParams   String?
  playTime       Int      @default(0) // minutes
  lastPlayed     DateTime?
  addedAt        DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@unique([userId, gameId])
  @@map("user_games")
}

model GameSession {
  id            String        @id @default(cuid())
  name          String
  description   String?
  gameId        String
  hostId        String
  maxPlayers    Int           @default(8)
  isPrivate     Boolean       @default(false)
  password      String?
  status        SessionStatus @default(WAITING)
  vpnNetworkId  String?
  vpnConfig     Json?         // Store VPN configuration data
  createdAt     DateTime      @default(now())
  startedAt     DateTime?
  endedAt       DateTime?
  updatedAt     DateTime      @updatedAt

  // Session Configuration
  allowSpectators Boolean @default(true)
  autoStart       Boolean @default(false)
  sessionRules    Json?

  // Relationships
  game     Game            @relation(fields: [gameId], references: [id])
  host     User            @relation("SessionHost", fields: [hostId], references: [id])
  players  SessionPlayer[]
  vpnNetwork VPNNetwork?   @relation(fields: [vpnNetworkId], references: [id])
  chatMessages ChatMessage[]

  @@map("game_sessions")
}

// Canonical catalog of available games (e.g., from GameRanger)
model GameCatalog {
  id             String   @id @default(cuid())
  provider       String   // e.g., 'gameranger'
  name           String
  slug           String   @unique
  aliases        Json?
  tags           Json?
  suggestedPaths Json?    // array of strings (install path suggestions)
  defaultExecs   Json?    // array of filename patterns to consider
  requiresVPN    Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([provider, name])
  @@map("game_catalog")
}

model SessionPlayer {
  id        String       @id @default(cuid())
  sessionId String
  userId    String
  status    PlayerStatus @default(JOINED)
  joinedAt  DateTime     @default(now())
  leftAt    DateTime?

  session GameSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([sessionId, userId])
  @@map("session_players")
}

model VPNNetwork {
  id             String   @id @default(cuid())
  name           String
  subnet         String   @unique // e.g., "10.0.1.0/24"
  serverPublicKey String
  serverPrivateKey String
  serverEndpoint String
  port           Int      @default(51820)
  createdAt      DateTime @default(now())
  expiresAt      DateTime?
  isActive       Boolean  @default(true)

  // Relationships
  sessions       GameSession[]
  clients        VPNClient[]

  @@map("vpn_networks")
}

model VPNClient {
  id             String   @id @default(cuid())
  networkId      String
  userId         String
  clientIP       String   // e.g., "10.0.1.2"
  publicKey      String
  privateKey     String
  configContent  String   // Full WireGuard config
  createdAt      DateTime @default(now())
  lastConnected  DateTime?

  network VPNNetwork @relation(fields: [networkId], references: [id], onDelete: Cascade)

  @@unique([networkId, userId])
  @@unique([networkId, clientIP])
  @@map("vpn_clients")
}

model Friendship {
  id         String           @id @default(cuid())
  senderId   String
  receiverId String
  status     FriendshipStatus @default(PENDING)
  createdAt  DateTime         @default(now())
  acceptedAt DateTime?

  sender   User @relation("FriendshipSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("FriendshipReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@map("friendships")
}

model ChatMessage {
  id        String      @id @default(cuid())
  content   String
  authorId  String
  sessionId String?
  type      MessageType @default(TEXT)
  createdAt DateTime    @default(now())

  author  User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  session GameSession? @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  title     String
  content   String
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Enums
enum SubscriptionTier {
  FREE
  PREMIUM
  PRO
}

enum Platform {
  WINDOWS
  MAC
  LINUX
}

enum GameCategory {
  STRATEGY
  RPG
  ACTION
  SIMULATION
  SPORTS
  PUZZLE
  ADVENTURE
  OTHER
}

enum SessionStatus {
  WAITING
  STARTING
  ACTIVE
  PAUSED
  FINISHED
  CANCELLED
}

enum PlayerStatus {
  JOINED
  READY
  IN_GAME
  DISCONNECTED
  LEFT
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  BLOCKED
}

enum MessageType {
  TEXT
  SYSTEM
  GAME_EVENT
}

enum NotificationType {
  FRIEND_REQUEST
  SESSION_INVITE
  SESSION_STARTED
  SYSTEM
  PAYMENT
}

// NextAuth.js models for OAuth support
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
